// This file is automatically generated by qtc from "sqlite.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line sqlite.qtpl:1
package templates

//line sqlite.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line sqlite.qtpl:1
import "github.com/etgryphon/stringUp"

//line sqlite.qtpl:2
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line sqlite.qtpl:2
func StreamBuild(qw422016 *qt422016.Writer, tableName string, fields []string, fieldTypes []string) {
	//line sqlite.qtpl:2
	qw422016.N().S(`
import SQLite

let db = try Connection("path/to/db.sqlite3")

let users = Table("`)
	//line sqlite.qtpl:7
	qw422016.E().S(tableName)
	//line sqlite.qtpl:7
	qw422016.N().S(`")

`)
	//line sqlite.qtpl:10
	for i, field := range fields {
		//line sqlite.qtpl:11
		streammakeVarLine(qw422016, field, fieldTypes[i])
		//line sqlite.qtpl:12
	}
	//line sqlite.qtpl:13
	qw422016.N().S(`
`)
//line sqlite.qtpl:14
}

//line sqlite.qtpl:14
func WriteBuild(qq422016 qtio422016.Writer, tableName string, fields []string, fieldTypes []string) {
	//line sqlite.qtpl:14
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line sqlite.qtpl:14
	StreamBuild(qw422016, tableName, fields, fieldTypes)
	//line sqlite.qtpl:14
	qt422016.ReleaseWriter(qw422016)
//line sqlite.qtpl:14
}

//line sqlite.qtpl:14
func Build(tableName string, fields []string, fieldTypes []string) string {
	//line sqlite.qtpl:14
	qb422016 := qt422016.AcquireByteBuffer()
	//line sqlite.qtpl:14
	WriteBuild(qb422016, tableName, fields, fieldTypes)
	//line sqlite.qtpl:14
	qs422016 := string(qb422016.B)
	//line sqlite.qtpl:14
	qt422016.ReleaseByteBuffer(qb422016)
	//line sqlite.qtpl:14
	return qs422016
//line sqlite.qtpl:14
}

//line sqlite.qtpl:15
func streammakeVarLine(qw422016 *qt422016.Writer, field string, fieldType string) {
	//line sqlite.qtpl:15
	qw422016.N().S(`
`)
	//line sqlite.qtpl:18
	varName := stringUp.CamelCase(field)
	var colType string = fieldType
	switch fieldType {
	case "integer":
		colType = "Int"
	case "varchar", "text":
		colType = "String"
	case "datetime":
		colType = "Date"
	case "float":
		colType = "Float"
	case "tinyint(1)":
		colType = "Bool"
	}

	//line sqlite.qtpl:32
	qw422016.N().S(`let `)
	//line sqlite.qtpl:33
	qw422016.E().S(varName)
	//line sqlite.qtpl:33
	qw422016.N().S(`= Expression<`)
	//line sqlite.qtpl:33
	qw422016.E().S(colType)
	//line sqlite.qtpl:33
	qw422016.N().S(`>("`)
	//line sqlite.qtpl:33
	qw422016.E().S(field)
	//line sqlite.qtpl:33
	qw422016.N().S(`") `)
	//line sqlite.qtpl:34
	qw422016.N().S(`
`)
//line sqlite.qtpl:35
}

//line sqlite.qtpl:35
func writemakeVarLine(qq422016 qtio422016.Writer, field string, fieldType string) {
	//line sqlite.qtpl:35
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line sqlite.qtpl:35
	streammakeVarLine(qw422016, field, fieldType)
	//line sqlite.qtpl:35
	qt422016.ReleaseWriter(qw422016)
//line sqlite.qtpl:35
}

//line sqlite.qtpl:35
func makeVarLine(field string, fieldType string) string {
	//line sqlite.qtpl:35
	qb422016 := qt422016.AcquireByteBuffer()
	//line sqlite.qtpl:35
	writemakeVarLine(qb422016, field, fieldType)
	//line sqlite.qtpl:35
	qs422016 := string(qb422016.B)
	//line sqlite.qtpl:35
	qt422016.ReleaseByteBuffer(qb422016)
	//line sqlite.qtpl:35
	return qs422016
//line sqlite.qtpl:35
}
